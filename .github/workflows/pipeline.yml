name: Liatrio Exercise

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  imagename: whoha4242/liatrio-exercise
  tag: 1.0.$GITHUB_RUN_ID
  dockeruser: whoha4242
  # NOTE: You must include a secret in your repo's settings to contain your docker user's password or change docker auth methods
  dockerpwd: ${{secrets.dockerpassword}}
  azure-rg: csw-liatrio-exercise-rg
  aks-cluster: csw-liatrio-exercise-aks1
  azure-tenant: 7500411e-6146-4c36-8612-6f9390df3440

jobs:

  build_test_push:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Run Unit Tests
      run: npm install && npm test
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag ${{env.imagename}}:${{env.tag}}

    # Tag and push image if main branch run
    - name: Add latest tag
      if: ${{github.event_name != 'pull_request' && github.ref == 'refs/heads/main'}}
      run: docker tag ${{env.imagename}}:${{env.tag}} ${{env.imagename}}:latest
    - name: Docker Login
      if: ${{github.event_name != 'pull_request' && github.ref == 'refs/heads/main'}}
      run: docker login -u ${{env.dockeruser}} -p ${{env.dockerpwd}}
    - name: Push the Docker image versioned tag
      if: ${{github.event_name != 'pull_request' && github.ref == 'refs/heads/main'}}
      run: docker push ${{env.imagename}}:${{env.tag}}
    - name: Push the Docker image latest tag
      if: ${{github.event_name != 'pull_request' && github.ref == 'refs/heads/main'}}
      run: docker push ${{env.imagename}}:latest

  terraform:
    needs: build_test_push

    name: "Terraform"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init
    - name: Terraform Format
      working-directory: ./terraform
      run: terraform fmt -check
    - name: Terraform Plan
      working-directory: ./terraform
      run: terraform plan
    - name: Terraform Apply
      # note that only CI or Pull Request merge will generate this push event on main branch
      # UI manual trigger does not work
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      working-directory: ./terraform
      run: terraform apply -auto-approve

  deploy:
    needs: [build_test_push,terraform]

    runs-on: ubuntu-latest

    outputs:
      extip: ${{ steps.get_ext_ip.outputs.externalip }}

    steps:
      - uses: actions/checkout@v2
      - name: AZ Login
        run: az login --service-principal -u ${{secrets.AZ_CLIENT_ID}} -p ${{secrets.AZ_CLIENT_SECRET}} --tenant ${{env.azure-tenant}}
      - name: Get AKS Credentials
        run: az aks get-credentials --resource-group ${{env.azure-rg}} --name ${{env.aks-cluster}}
      - name: Add helm repo
        run: helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      - name: Install nginx ingress
        run: helm upgrade --install nginx-ingress ingress-nginx/ingress-nginx --version 4.0.13 --namespace ingress-basic --create-namespace --set controller.replicaCount=2 --set controller.nodeSelector."kubernetes\.io/os"=linux
      - name: Apply Deployment
        run: kubectl apply -f ./k8s-deployment.yml --namespace ingress-basic
      - name: Wait for API to come online
        timeout-minutes: 1
        run: |
          chmod +x check-endpoint.sh
          ./check-endpoint.sh time-api-lb
      - name: Apply Ingress
        run: kubectl apply -f ./k8s-ingress.yml --namespace ingress-basic
      - name: Get External IP
        id: get_ext_ip
        run: |
          kubectl --namespace ingress-basic get services -o wide
          $ingress = kubectl -n ingress-basic get svc nginx-ingress-ingress-nginx-controller -o json | convertfrom-json
          $ip = $ingress.status.loadbalancer.ingress.ip
          write-host "::set-output name=externalip::$ip"
        shell: pwsh

  validate:
    needs: [deploy]

    runs-on: ubuntu-latest

    steps:
    - name: List IP
      run: echo ${{needs.deploy.outputs.extip}}
    - name: Validate content
      run: |
        $result = invoke-restmethod -Method get -Uri http://${{needs.deploy.outputs.extip}}/time
        if ($result.message -eq "Automate all the things!") {
          $result
          Write-Host "Deployment validation succeeded! We managed to [$($result.message)]" -foregroundcolor green -backgroundcolor darkgreen
          $art = @"
         ▄▄▄▄▄▄▄▄▄▄▄  ▄         ▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄  ▄ 
        ▐░░░░░░░░░░░▌▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌▐░▌
        ▐░█▀▀▀▀▀▀▀▀▀ ▐░▌       ▐░▌▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀▀▀ ▐░▌▐░▌
        ▐░▌          ▐░▌       ▐░▌▐░▌          ▐░▌          ▐░▌          ▐░▌          ▐░▌          ▐░▌▐░▌
        ▐░█▄▄▄▄▄▄▄▄▄ ▐░▌       ▐░▌▐░▌          ▐░▌          ▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄▄▄ ▐░▌▐░▌
        ▐░░░░░░░░░░░▌▐░▌       ▐░▌▐░▌          ▐░▌          ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌▐░▌
         ▀▀▀▀▀▀▀▀▀█░▌▐░▌       ▐░▌▐░▌          ▐░▌          ▐░█▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀█░▌ ▀▀▀▀▀▀▀▀▀█░▌▐░▌▐░▌
                  ▐░▌▐░▌       ▐░▌▐░▌          ▐░▌          ▐░▌                    ▐░▌          ▐░▌ ▀  ▀ 
         ▄▄▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄█░▌ ▄▄▄▄▄▄▄▄▄█░▌ ▄  ▄ 
        ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌▐░▌
         ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀  ▀ 
        "@
          Write-Host $art -foregroundcolor green -backgroundcolor darkgreen
        }
        else {
          $result
          Write-Host "Deployment validation failed. We got back this response: [$($result.message)]" -foregroundcolor black -backgroundcolor darkred
          throw "Marking validation job as failed"
        }
      shell: pwsh
